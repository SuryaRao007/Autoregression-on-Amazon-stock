# -*- coding: utf-8 -*-
"""StockPredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1knuOdW6vpxJlHlXIvk_hUefV4nV86xss
"""

# This program predicts outcome of stockprice
import pandas as pd
import numpy as np
import requests
import pandas_datareader as web
import math
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

from google.colab import files
files.upload()

df = pd.read_csv('PortfolioAgniParikshaJan292021.csv')

df1 = web.DataReader('AMZN',data_source='yahoo',start ='2012-12-01', end ='2020-02-10')
df1.shape
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df1['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize = 18)
plt.show()

data = df1.filter(['Close'])
dataset = data.values
training_data_len = math.ceil(len(dataset)*0.8)
df1.columns
dataset

#scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
scaled_data

#scaled training data set
train_data = scaled_data[0:training_data_len,:]
train_data
print(train_data.shape)
#split data into x_train and y_train
x_train = []
y_train = []
for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i <= 60:
    print(x_train)
    print(y_train)
    print()

#convert x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

#x_train.shape
x_train = np.reshape(x_train,(x_train.shape[0], x_train.shape[1],1))
x_train.shape

#Build the LSTM model
model = Sequential()
model.add(LSTM(50,return_sequences=True, input_shape = (x_train.shape[1],1)))
model.add(LSTM(50,return_sequences = False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam',loss='mean_squared_error')
model.fit(x_train, y_train, batch_size = 1, epochs=1)

#test data
test_data = scaled_data[training_data_len - 60:,:]
x_test = []
y_test = dataset[training_data_len:,:]
for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])

x_test = np.array(x_test)
x_test.shape

x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#RMSE
rmse = np.sqrt(np.mean(predictions - y_test)**2)
print(rmse)

#plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
plt.figure(figsize=(16,8))
plt.title('model')
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price ($)', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val','Predict'],loc='lower right')
plt.show()

Amzn_quote = web.DataReader('AMZN',data_source = 'yahoo', start='2012-01-01',end='2021-02-10')
#create new data frame
new_df = Amzn_quote.filter(['Close'])
last_60_days = new_df[-60:].values
last_60_days_scaled = scaler.transform(last_60_days)
x_test = []
x_test.append(last_60_days_scaled)
X_test = np.array(x_test) 
X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))
pred_price = model.predict(X_test)
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

Amzn_quote2 = web.DataReader('AMZN',data_source = 'yahoo', start='2021-02-11',end='2021-02-11')
print(Amzn_quote2['Close'])